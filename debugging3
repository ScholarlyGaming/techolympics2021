#**
# * BinarySearchBuggy - implements iterative binary search
# * 
# *

def binarySearch(list, key):
	left = 0 
	right = len(list)-1
	
	#Changed < to <= in order to ensure it loops again. Without this, 44 could not be found because left=right=the desired index. Could also be fixed by checking to see if left=right=the answer after the loop, and this would be faster, but this is the best solution for sticking to the original code and the improvement would be marginal at best.
	while left <= right:
	    # Added left; original subtracted left leading to infinite loops and improper calcualtions when left !== 0 (i.e. when trying to find items in the list that are in the second half)
		mid = (right + left) // 2
		if list[mid] == key:
			return mid
	    # Changed > into < because > didn't make sense; it always did the opposite of what it should do to narrow the field, and often excluded the index we needed
		elif list[mid] < key:
			left = mid + 1
		else:
			right = mid - 1
	return -1


list = [5, 9, 10, 12, 15, 17, 21, 25, 32, 44, 54, 65]

# display array contents
print("array to be searched:")
for i in range(len(list)):
	print("["+str(list[i])+"] ")
print()
	
print()
key=int(input("enter a value to search for or -1 to stop: "))

while (key != -1):
	location = binarySearch(list, key)
	if (location == -1):
		print(""+ str(key) + " was not found ")
	else:
		print(""+ str(key) + " found in location " + str(location))

	print()
	key=int(input("enter a value to search for or -1 to stop: "))
